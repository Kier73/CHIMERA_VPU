
import React from 'react';
import Section from './components/Section';
import CodeBlock from './components/CodeBlock';
import FileTree from './components/FileTree';
import PillarCard from './components/PillarCard';
import { projectData } from './constants/projectData.tsx';
import { DocumentMagnifyingGlassIcon } from '@heroicons/react/24/outline';

const App: React.FC = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-blue-100">
      <header className="bg-primary text-white py-10 shadow-2xl">
        <div className="container mx-auto px-4 text-center">
          <div className="flex items-center justify-center mb-4">
            <DocumentMagnifyingGlassIcon className="w-16 h-16 mr-4 text-accent" />
            <h1 className="text-5xl font-extrabold tracking-tight">
              {projectData.title}
            </h1>
          </div>
          <p className="text-xl text-blue-200 max-w-3xl mx-auto">
            An interactive exploration of the Project Chimera VPU architecture, design principles, and core components.
          </p>
        </div>
      </header>

      <main className="container mx-auto p-4 md:p-8">
        <Section title="Project Overview">
          <p className="text-xl leading-relaxed">{projectData.introduction}</p>
        </Section>

        <Section title="Integrated Repository Structure">
          <p className="mb-4">The project is organized for modularity, scalability, and a clear separation between the public API, the core logic, and the hardware-specific implementations.</p>
          <FileTree nodes={projectData.repoStructure} />
        </Section>

        <Section title="Build System Manifest (CMakeLists.txt)">
          <p className="mb-4">This file defines how to build the VPU core library and the tests that depend on it.</p>
          <CodeBlock code={projectData.cmakeFileContent} language="cmake" />
        </Section>

        <Section title="First End-to-End Test (tests/e2e_first_loop.cpp)">
          <p className="mb-4">This test verifies that all five pillars can be instantiated and can work together to process a single, simple task from start to finish. It uses a trivial task—element-wise addition of two small vectors—to provide a predictable outcome.</p>
          <CodeBlock code={projectData.e2eTestContent} language="cpp" />
        </Section>

        <Section title="The Five Pillars of Chimera VPU">
          {projectData.pillars.map(pillar => (
            <PillarCard key={pillar.id} pillar={pillar} />
          ))}
        </Section>

        <Section title={projectData.vpuTechSpec.title}>
          <p className="mb-4">This section specifies the high-level architecture, data contracts, and core modules for the VPU execution environment.</p>
          {projectData.vpuTechSpec.coreDataStructures.map(ds => (
            <div key={ds.name} className="mb-6">
              <h4 className="text-xl font-semibold text-primary mb-2">{ds.name}</h4>
              <CodeBlock code={ds.definition} language={ds.language} />
            </div>
          ))}
        </Section>

        <Section title={projectData.pillar2Implementation.title}>
           <p className="mb-4">This code provides the foundational perception capabilities of the VPU. It uses standard C++ and includes placeholders where it would link to external libraries like an FFTW-compatible library for performance.</p>
          <CodeBlock code={projectData.pillar2Implementation.code} language={projectData.pillar2Implementation.language} />
          <h4 className="text-xl font-semibold text-primary mt-6 mb-2">Example Usage:</h4>
          <CodeBlock code={projectData.pillar2Implementation.exampleUsage} language={projectData.pillar2Implementation.language} />
        </Section>

      </main>

      <footer className="text-center py-8 text-text-secondary border-t border-gray-300 mt-12">
        <p>&copy; {new Date().getFullYear()} Project Chimera Documentation. All rights reserved.</p>
        <p>Generated by AI with expertise in React, Tailwind, and UI/UX.</p>
      </footer>
    </div>
  );
};

export default App;
